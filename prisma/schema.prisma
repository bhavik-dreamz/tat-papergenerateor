// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  TEAM
  STUDENT
}

enum PlanTier {
  FREE
  MEDIUM
  PRO
}

enum PaperStatus {
  DRAFT
  GENERATED
  SUBMITTED
  GRADED
}

enum QuestionType {
  MCQ
  SHORT_ANSWER
  LONG_ANSWER
  NUMERICAL
  CASE_STUDY
  CODING
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  planId            String?
  courses           CourseEnrollment[]
  paperRequests     PaperRequest[]
  submissions       PaperSubmission[]
  createdCourses    Course[]           @relation("CourseCreator")
  uploadedMaterials CourseMaterial[]   @relation("MaterialUploader")
  createdTeams      Team[]             @relation("TeamCreator")
  teamMemberships   TeamMember[]
  plan              Plan?              @relation(fields: [planId], references: [id])

  @@map("users")
}

model Plan {
  id                String   @id @default(cuid())
  tier              PlanTier
  name              String
  description       String
  price             Float
  currency          String   @default("USD")
  maxPapersPerMonth Int
  maxVariants       Int
  includeAnswers    Boolean  @default(false)
  features          Json // Array of feature strings
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  users              User[]
  StripeSubscription StripeSubscription[]

  @@map("plans")
}

model Course {
  id                String   @id @default(cuid())
  name              String
  description       String
  code              String   @unique
  credits           Int      @default(3)
  level             String // e.g., "Undergraduate", "Graduate"
  boardOrUniversity String
  language          String   @default("English")
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdById       String

  // Relations
  createdBy     User                @relation("CourseCreator", fields: [createdById], references: [id])
  enrollments   CourseEnrollment[]
  materials     CourseMaterial[]
  paperStyles   PaperStyleProfile[]
  paperRequests PaperRequest[]

  @@map("courses")
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model CourseMaterial {
  id           String   @id @default(cuid())
  courseId     String
  title        String
  description  String?
  type         String // "SYLLABUS", "OLD_PAPER", "REFERENCE"
  fileUrl      String?
  fileSize     Int      @default(0)
  content      String? // For text content
  year         Int? // For old papers
  weightings   Json? // Topic weightings
  styleNotes   String? // Style-specific notes
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedById String

  // Relations
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  uploadedBy User   @relation("MaterialUploader", fields: [uploadedById], references: [id])

  @@map("course_materials")
}

model PaperStyleProfile {
  id               String   @id @default(cuid())
  courseId         String
  name             String
  description      String?
  sections         Json // Array of section objects
  weightings       Json // Topic weightings
  phrasingPatterns Json // Array of phrasing patterns
  constraints      Json? // Array of constraints
  exemplars        Json? // Array of exemplar papers
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("paper_style_profiles")
}

model PaperRequest {
  id              String      @id @default(cuid())
  userId          String
  courseId        String
  examType        String // "Midterm", "Final", "Unit Test"
  totalMarks      Int
  durationMinutes Int
  topicsInclude   Json // Array of topics as JSON
  topicsExclude   Json // Array of topics to exclude as JSON
  difficultyPref  Json? // Difficulty preferences
  styleOverrides  String? // Style override notes
  status          PaperStatus @default(DRAFT)
  seed            String? // For reproducible generation
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  variants PaperVariant[]

  @@map("paper_requests")
}

model PaperVariant {
  id             String   @id @default(cuid())
  paperRequestId String
  variantId      String // e.g., "v1", "v2"
  paperData      Json // Complete generated paper JSON
  markingScheme  Json // Answer keys and rubrics
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  paperRequest PaperRequest      @relation(fields: [paperRequestId], references: [id], onDelete: Cascade)
  submissions  PaperSubmission[]

  @@map("paper_variants")
}

model PaperSubmission {
  id               String      @id @default(cuid())
  userId           String
  paperVariantId   String
  submittedFile    String // File URL
  extractedAnswers Json? // Extracted answers from file
  status           PaperStatus @default(SUBMITTED)
  submittedAt      DateTime    @default(now())
  gradedAt         DateTime?

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paperVariant PaperVariant   @relation(fields: [paperVariantId], references: [id], onDelete: Cascade)
  grading      GradingResult?

  @@map("paper_submissions")
}

model GradingResult {
  id             String   @id @default(cuid())
  submissionId   String   @unique
  totalScore     Int
  maxScore       Int
  percentage     Float
  grade          String // "A", "B", "C", "D", "F", "Pass", "Fail"
  marksBreakdown Json // Detailed breakdown per question
  feedback       String? // Overall feedback
  autoGraded     Boolean  @default(true)
  gradedAt       DateTime @default(now())

  // Relations
  submission PaperSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("grading_results")
}

model StripeSubscription {
  id                   String   @id
  userId               String   @unique
  planId               String
  stripeCustomerId     String
  stripeSubscriptionId String
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  plan Plan @relation(fields: [planId], references: [id])

  @@map("stripe_subscriptions")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy User         @relation("TeamCreator", fields: [createdById], references: [id])
  members   TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     String   @default("MEMBER") // "ADMIN", "MEMBER"
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}
